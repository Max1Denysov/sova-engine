#include "InternalFunction.hpp"
#include "InfEngine2/_Include/Errors.h"
#include "MeasConv.hpp"
#include <NanoLib/NumberConvertor.hpp>
#include <NanoLib/LongFloat.hpp>

using namespace InternalFunctions;

const unsigned int RESULT_BUFFER_LEN = 256;

const DLFucntionArgInfo MeasConv::ARGS[] = {
	{ DLFAT_EXTENDED, 0 },
	{ DLFAT_EXTENDED, 0 },
	{ DLFAT_EXTENDED, 0 }
};

const DLFunctionInfo MeasConv::DLF_INFO = {
	"MeasConv",
	"",
	"Returns result of units conversion.",
	DLFRT_TEXT,
	3,
	ARGS,
	{ 3, 0, 0 },
	{ 3, 0, 0 },
	DLFO_CACHE,
	DLFunctionInterfaceVersion,
	5,
	InfDataProtocolVersion,
	nullptr
};

struct TRAW_DATA
{
	const char * vName;
	enum MeasConv::Group vGroup;
	double vMValue;
	double vSValue;
};


static const TRAW_DATA RAW_DATA[] = {
	// Время
	{ "\xd0\xb3\xd0\xbe\xd0\xb4", MeasConv::G_TIME, 3600 * 24 * 365, 0 },	// год
	{ "\xd0\xb4\xd0\xb5\xd0\xbd\xd1\x8c", MeasConv::G_TIME, 3600 * 24, 0 },		// день
	{ "\xd0\xbc\xd0\xb5\xd1\x81\xd1\x8f\xd1\x86", MeasConv::G_TIME, 3600 * 24 * 30, 0 },	// месяц
	{ "\xd0\xbc\xd0\xb8\xd0\xbd\xd1\x83\xd1\x82\xd0\xb0", MeasConv::G_TIME, 60, 0 },	// минута
	{ "\xd0\xbd\xd0\xb5\xd0\xb4\xd0\xb5\xd0\xbb\xd1\x8f", MeasConv::G_TIME, 3600 * 24 * 7, 0 },		// неделя
	{ "\xd1\x81\xd0\xb5\xd0\xba\xd1\x83\xd0\xbd\xd0\xb4\xd0\xb0", MeasConv::G_TIME, 1, 0 },		// секунда
	{ "\xd1\x87\xd0\xb0\xd1\x81", MeasConv::G_TIME, 3600, 0  },		// час

	// Давление
	{ "\xd0\xb0\xd1\x82\xd0\xbc\xd0\xbe\xd1\x81\xd1\x84\xd0\xb5\xd1\x80\xd0\xb0", MeasConv::G_PRESSURE, 101325, 0  },	// атмосфера
	{ "\xd0\xb1\xd0\xb0\xd1\x80", MeasConv::G_PRESSURE, 100000, 0 },	// бар
	{ "\xd0\xbc\xd0\xb8\xd0\xbb\xd0\xbb\xd0\xb8\xd0\xbc\xd0\xb5\xd1\x82\xd1\x80\x20\xd1\x80\xd1\x82\xd1\x83\xd1\x82\xd0\xbd\xd0\xbe\xd0\xb3\xd0\xbe\x20\xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd0\xb1\xd0\xb0", MeasConv::G_PRESSURE, 133.322, 0 },	// миллиметр ртутного столба
	{ "\xd0\xbf\xd0\xb0\xd1\x81\xd0\xba\xd0\xb0\xd0\xbb\xd1\x8c", MeasConv::G_PRESSURE, 1., 0 },	// паскаль

	// Длина
	{ "\xd0\xb0\xd0\xbd\xd0\xb3\xd1\x81\xd1\x82\xd1\x80\xd0\xb5\xd0\xbc", MeasConv::G_LENGTH, 1E-10, 0 },	// ангстрем
	{ "\xd0\xb0\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd", MeasConv::G_LENGTH, 0.7112, 0 },		// аршин
	{ "\xd0\xb2\xd0\xb5\xd1\x80\xd1\x81\xd1\x82\xd0\xb0", MeasConv::G_LENGTH, 10668, 0 },	// верста
	{ "\xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xbe\xd0\xba", MeasConv::G_LENGTH, 0.04445, 0 },		// вершок
	{ "\xd0\xb4\xd0\xb5\xd1\x86\xd0\xb8\xd0\xbc\xd0\xb5\xd1\x82\xd1\x80", MeasConv::G_LENGTH, 0.1, 0 },		// дециметр
	{ "\xd0\xb4\xd1\x8e\xd0\xb9\xd0\xbc", MeasConv::G_LENGTH, 0.0254,0  },		// дюйм
	{ "\xd0\xba\xd0\xb8\xd0\xbb\xd0\xbe\xd0\xbc\xd0\xb5\xd1\x82\xd1\x80", MeasConv::G_LENGTH, 1000, 0 },	// километр
	{ "\xd0\xbc\xd0\xb5\xd1\x82\xd1\x80", MeasConv::G_LENGTH, 1., 0 },		// метр
	{ "\xd0\xbc\xd0\xb8\xd0\xbb\xd1\x8f", MeasConv::G_LENGTH, 1609344, 0 },		// миля
	{ "\xd0\xbc\xd0\xb8\xd0\xbb\xd0\xbb\xd0\xb8\xd0\xbc\xd0\xb5\xd1\x82\xd1\x80", MeasConv::G_LENGTH, 0.001, 0 },	// миллиметр
	{ "\xd0\xbc\xd0\xbe\xd1\x80\xd1\x81\xd0\xba\xd0\xb0\xd1\x8f\x20\xd0\xbc\xd0\xb8\xd0\xbb\xd1\x8f", MeasConv::G_LENGTH, 1852, 0 },	// морская миля
	{ "\xd1\x81\xd0\xb0\xd0\xb6\xd0\xb5\xd0\xbd\xd1\x8c", MeasConv::G_LENGTH, 21336, 0 },	// сажень
	{ "\xd1\x81\xd0\xb0\xd0\xbd\xd1\x82\xd0\xb8\xd0\xbc\xd0\xb5\xd1\x82\xd1\x80", MeasConv::G_LENGTH, 0.01, 0 },	// сантиметр
	{ "\xd1\x84\xd1\x83\xd1\x82", MeasConv::G_LENGTH, 0.3048, 0 },		// фут
	{ "\xd1\x8f\xd1\x80\xd0\xb4", MeasConv::G_LENGTH, 0.9144, 0 },		// ярд

	// Информация
	{ "\xd0\xb1\xd0\xb0\xd0\xb9\xd1\x82", MeasConv::G_INFORMATION, 1, 0 },		// байт
	{ "\xd0\xb1\xd0\xb8\xd1\x82", MeasConv::G_INFORMATION, 0.125, 0 },		// бит
	{ "\xd0\xb3\xd0\xb8\xd0\xb1\xd0\xb8\xd0\xb1\xd0\xb0\xd0\xb9\xd1\x82", MeasConv::G_INFORMATION, 1 << 30, 0 },	// гибибайт
	{ "\xd0\xb3\xd0\xb8\xd0\xb3\xd0\xb0\xd0\xb1\xd0\xb0\xd0\xb9\xd1\x82", MeasConv::G_INFORMATION, 1E+9, 0 },	// гигабайт
	{ "\xd0\xb3\xd0\xb8\xd0\xb3\xd0\xb0\xd0\xb1\xd0\xb8\xd1\x82", MeasConv::G_INFORMATION, 125E+6, 0 },		// гигабит
	{ "\xd0\xb7\xd0\xb5\xd0\xb1\xd0\xb8\xd0\xb1\xd0\xb0\xd0\xb9\xd1\x82", MeasConv::G_INFORMATION, 1180591620717411303424., 0  },	// зебибайт
	{ "\xd0\xb7\xd0\xb5\xd1\x82\xd1\x82\xd0\xb0\xd0\xb1\xd0\xb0\xd0\xb9\xd1\x82", MeasConv::G_INFORMATION, 1E+21, 0 },		// зеттабайт
	{ "\xd0\xb7\xd0\xb5\xd1\x82\xd1\x82\xd0\xb0\xd0\xb1\xd0\xb8\xd1\x82", MeasConv::G_INFORMATION, 125E+21, 0 },	// зеттабит
	{ "\xd0\xb9\xd0\xbe\xd0\xb1\xd0\xb8\xd0\xb1\xd0\xb0\xd0\xb9\xd1\x82", MeasConv::G_INFORMATION, 1208925819614629174706176., 0 },		// йобибайт
	{ "\xd0\xb9\xd0\xbe\xd1\x82\xd1\x82\xd0\xb0\xd0\xb1\xd0\xb0\xd0\xb9\xd1\x82", MeasConv::G_INFORMATION, 1E+24, 0 },		// йоттабайт
	{ "\xd0\xb9\xd0\xbe\xd1\x82\xd1\x82\xd0\xb0\xd0\xb1\xd0\xb8\xd1\x82", MeasConv::G_INFORMATION, 125E+21, 0 },	// йоттабит
	{ "\xd0\xba\xd0\xb8\xd0\xb1\xd0\xb8\xd0\xb1\xd0\xb0\xd0\xb9\xd1\x82", MeasConv::G_INFORMATION, 1 << 10, 0 },	// кибибайт
	{ "\xd0\xba\xd0\xb8\xd0\xbb\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb9\xd1\x82", MeasConv::G_INFORMATION, 1000, 0 },	// килобайт
	{ "\xd0\xba\xd0\xb8\xd0\xbb\xd0\xbe\xd0\xb1\xd0\xb8\xd1\x82", MeasConv::G_INFORMATION, 125, 0 },	// килобит
	{ "\xd0\xbc\xd0\xb5\xd0\xb1\xd0\xb8\xd0\xb1\xd0\xb0\xd0\xb9\xd1\x82", MeasConv::G_INFORMATION, 1 << 20, 0 },	// мебибайт
	{ "\xd0\xbc\xd0\xb5\xd0\xb1\xd0\xb8\xd0\xb1\xd0\xb8\xd1\x82", MeasConv::G_INFORMATION, 1 << 17, 0 },	// мебибит
	{ "\xd0\xbc\xd0\xb5\xd0\xb3\xd0\xb0\xd0\xb1\xd0\xb0\xd0\xb9\xd1\x82", MeasConv::G_INFORMATION, 1E+6, 0 },	// мегабайт
	{ "\xd0\xbc\xd0\xb5\xd0\xb3\xd0\xb0\xd0\xb1\xd0\xb8\xd1\x82", MeasConv::G_INFORMATION, 125000, 0 },		// мегабит
	{ "\xd0\xbd\xd0\xb8\xd0\xb1\xd0\xb1\xd0\xbb", MeasConv::G_INFORMATION, 0.5, 0 },	// ниббл
	{ "\xd0\xbf\xd0\xb5\xd0\xb1\xd0\xb8\xd0\xb1\xd0\xb0\xd0\xb9\xd1\x82", MeasConv::G_INFORMATION,  1125899906842624., 0 },		// пебибайт
	{ "\xd0\xbf\xd0\xb5\xd1\x82\xd0\xb0\xd0\xb1\xd0\xb0\xd0\xb9\xd1\x82", MeasConv::G_INFORMATION, 1E+15, 0 },		// петабайт
	{ "\xd0\xbf\xd0\xb5\xd1\x82\xd0\xb0\xd0\xb1\xd0\xb8\xd1\x82", MeasConv::G_INFORMATION, 125E+12, 0 },	// петабит
	{ "\xd1\x82\xd0\xb5\xd0\xb1\xd0\xb8\xd0\xb1\xd0\xb0\xd0\xb9\xd1\x82", MeasConv::G_INFORMATION, 1099511627776., 0 },		// тебибайт
	{ "\xd1\x82\xd0\xb5\xd1\x80\xd0\xb0\xd0\xb1\xd0\xb0\xd0\xb9\xd1\x82", MeasConv::G_INFORMATION, 1E+12, 0  },		// терабайт
	{ "\xd1\x82\xd0\xb5\xd1\x80\xd0\xb0\xd0\xb1\xd0\xb8\xd1\x82", MeasConv::G_INFORMATION, 125E+9, 0   },	// терабит
	{ "\xd1\x8d\xd0\xba\xd1\x81\xd0\xb0\xd0\xb1\xd0\xb0\xd0\xb9\xd1\x82", MeasConv::G_INFORMATION, 1E+15, 0 },		// эксабайт
	{ "\xd1\x8d\xd0\xba\xd1\x81\xd0\xb0\xd0\xb1\xd0\xb8\xd1\x82", MeasConv::G_INFORMATION, 125E+12, 0 },	// эксабит
	{ "\xd1\x8d\xd0\xba\xd1\x81\xd0\xb1\xd0\xb8\xd0\xb1\xd0\xb0\xd0\xb9\xd1\x82", MeasConv::G_INFORMATION, 1152921504606846976., 0 },	// эксбибайт

	// Магнитное поле
	{ "\xd0\xb3\xd0\xb0\xd1\x83\xd1\x81\xd1\x81", MeasConv::G_MAGNETIC_FIELD, 10000., 0 },		// гаусс
	{ "\xd0\xb3\xd0\xb8\xd0\xb3\xd0\xb0\xd1\x82\xd0\xb5\xd1\x81\xd0\xbb\xd0\xb0", MeasConv::G_MAGNETIC_FIELD, 1E+9, 0 },	// гигатесла
	{ "\xd0\xb7\xd0\xb5\xd1\x82\xd1\x82\xd0\xb0\xd1\x82\xd0\xb5\xd1\x81\xd0\xbb\xd0\xb0", MeasConv::G_MAGNETIC_FIELD, 1E+21, 0 },	// зеттатесла
	{ "\xd0\xb9\xd0\xbe\xd1\x82\xd1\x82\xd0\xb0\xd1\x82\xd0\xb5\xd1\x81\xd0\xbb\xd0\xb0", MeasConv::G_MAGNETIC_FIELD, 1E+24, 0 },	// йоттатесла
	{ "\xd0\xba\xd0\xb8\xd0\xbb\xd0\xbe\xd1\x82\xd0\xb5\xd1\x81\xd0\xbb\xd0\xb0", MeasConv::G_MAGNETIC_FIELD, 1000., 0 },	// килотесла
	{ "\xd0\xbc\xd0\xb5\xd0\xb3\xd0\xb0\xd1\x82\xd0\xb5\xd1\x81\xd0\xbb\xd0\xb0", MeasConv::G_MAGNETIC_FIELD, 1E+6, 0 },	// мегатесла
	{ "\xd0\xbc\xd0\xb8\xd0\xba\xd1\x80\xd0\xbe\xd1\x82\xd0\xb5\xd1\x81\xd0\xbb\xd0\xb0", MeasConv::G_MAGNETIC_FIELD, 1E-6, 0 },	// микротесла
	{ "\xd0\xbc\xd0\xb8\xd0\xbb\xd0\xbb\xd0\xb8\xd1\x82\xd0\xb5\xd1\x81\xd0\xbb\xd0\xb0", MeasConv::G_MAGNETIC_FIELD, 1E-3, 0 },	// миллитесла
	{ "\xd0\xbd\xd0\xb0\xd0\xbd\xd0\xbe\xd1\x82\xd0\xb5\xd1\x81\xd0\xbb\xd0\xb0", MeasConv::G_MAGNETIC_FIELD, 1E-9, 0 },	// нанотесла
	{ "\xd0\xbf\xd0\xb5\xd1\x82\xd0\xb0\xd1\x82\xd0\xb5\xd1\x81\xd0\xbb\xd0\xb0", MeasConv::G_MAGNETIC_FIELD, 1E+15, 0 },	// петатесла
	{ "\xd0\xbf\xd0\xb8\xd0\xba\xd0\xbe\xd1\x82\xd0\xb5\xd1\x81\xd0\xbb\xd0\xb0", MeasConv::G_MAGNETIC_FIELD, 1E-12, 0 },	// пикотесла
	{ "\xd1\x82\xd0\xb5\xd1\x80\xd0\xb0\xd1\x82\xd0\xb5\xd1\x81\xd0\xbb\xd0\xb0", MeasConv::G_MAGNETIC_FIELD, 1E+12, 0 },	// тератесла
	{ "\xd1\x82\xd0\xb5\xd1\x81\xd0\xbb\xd0\xb0", MeasConv::G_MAGNETIC_FIELD, 1., 0 },		// тесла

	// Масса
	{ "\xd0\xb3\xd1\x80\xd0\xb0\xd0\xbc\xd0\xbc", MeasConv::G_WEIGHT, 1., 0 },		// грамм
	{ "\xd0\xba\xd0\xb0\xd1\x80\xd0\xb0\xd1\x82", MeasConv::G_WEIGHT, 0.2, 0 },		// карат
	{ "\xd0\xba\xd0\xb8\xd0\xbb\xd0\xbe\xd0\xb3\xd1\x80\xd0\xb0\xd0\xbc\xd0\xbc", MeasConv::G_WEIGHT, 1000., 0 },	// килограмм
	{ "\xd0\xbf\xd1\x83\xd0\xb4", MeasConv::G_WEIGHT, 16380.4815, 0 },		// пуд
	{ "\xd1\x82\xd0\xbe\xd0\xbd\xd0\xbd\xd0\xb0", MeasConv::G_WEIGHT, 1000000., 0 },	// тонна
	{ "\xd1\x82\xd1\x80\xd0\xbe\xd0\xb9\xd1\x81\xd0\xba\xd0\xb0\xd1\x8f\x20\xd1\x83\xd0\xbd\xd1\x86\xd0\xb8\xd1\x8f", MeasConv::G_WEIGHT, 31.1034768, 0 },		// тройская унция
	{ "\xd1\x82\xd1\x80\xd0\xbe\xd0\xb9\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9\x20\xd1\x84\xd1\x83\xd0\xbd\xd1\x82", MeasConv::G_WEIGHT, 373.2417216, 0 },		// тройский фунт
	{ "\xd1\x83\xd0\xbd\xd1\x86\xd0\xb8\xd1\x8f", MeasConv::G_WEIGHT, 28.3495231, 0 },		// унция
	{ "\xd1\x84\xd1\x83\xd0\xbd\xd1\x82", MeasConv::G_WEIGHT, 453.59237, 0 },	// фунт

	// Мощность
	{ "\xd0\xb2\xd0\xb0\xd1\x82\xd1\x82", MeasConv::G_POWER, 1., 0 },	// ватт
	{ "\xd0\xba\xd0\xb8\xd0\xbb\xd0\xbe\xd0\xb2\xd0\xb0\xd1\x82\xd1\x82", MeasConv::G_POWER, 1000., 0 },	// киловатт
	{ "\xd0\xbb\xd0\xbe\xd1\x88\xd0\xb0\xd0\xb4\xd0\xb8\xd0\xbd\xd0\xb0\xd1\x8f\x20\xd1\x81\xd0\xb8\xd0\xbb\xd0\xb0", MeasConv::G_POWER, 735.49875, 0 },	// лошадиная сила

	// Объем
	{ "\xd0\xb0\xd0\xbc\xd0\xb5\xd1\x80\xd0\xb8\xd0\xba\xd0\xb0\xd0\xbd\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9\x20\xd0\xb1\xd1\x83\xd1\x88\xd0\xb5\xd0\xbb\xd1\x8c", MeasConv::G_VOLUME, 35.239072, 0 },	// американский бушель
	{ "\xd0\xb0\xd0\xbc\xd0\xb5\xd1\x80\xd0\xb8\xd0\xba\xd0\xb0\xd0\xbd\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9\x20\xd0\xb3\xd0\xb0\xd0\xbb\xd0\xbb\xd0\xbe\xd0\xbd", MeasConv::G_VOLUME, 3.78541178, 0 },		// американский галлон
	{ "\xd0\xb0\xd0\xbc\xd0\xb5\xd1\x80\xd0\xb8\xd0\xba\xd0\xb0\xd0\xbd\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9\x20\xd0\xb6\xd0\xb8\xd0\xb4\xd0\xba\xd0\xb8\xd0\xb9\x20\xd0\xb1\xd0\xb0\xd1\x80\xd1\x80\xd0\xb5\xd0\xbb\xd1\x8c", MeasConv::G_VOLUME, 119.2, 0 },	// американский жидкий баррель
	{ "\xd0\xb0\xd0\xbc\xd0\xb5\xd1\x80\xd0\xb8\xd0\xba\xd0\xb0\xd0\xbd\xd1\x81\xd0\xba\xd0\xb0\xd1\x8f\x20\xd0\xba\xd0\xb2\xd0\xb0\xd1\x80\xd1\x82\xd0\xb0", MeasConv::G_VOLUME, 0.946352946, 0 },		// американская кварта
	{ "\xd0\xb0\xd0\xbc\xd0\xb5\xd1\x80\xd0\xb8\xd0\xba\xd0\xb0\xd0\xbd\xd1\x81\xd0\xba\xd0\xb0\xd1\x8f\x20\xd0\xbf\xd0\xb8\xd0\xbd\xd1\x82\xd0\xb0", MeasConv::G_VOLUME, 0.473176473, 0 },		// американская пинта
	{ "\xd0\xb0\xd0\xbc\xd0\xb5\xd1\x80\xd0\xb8\xd0\xba\xd0\xb0\xd0\xbd\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9\x20\xd1\x81\xd1\x83\xd1\x85\xd0\xbe\xd0\xb9\x20\xd0\xb1\xd0\xb0\xd1\x80\xd1\x80\xd0\xb5\xd0\xbb\xd1\x8c", MeasConv::G_VOLUME, 115.6, 0 },	// американский сухой баррель
	{ "\xd0\xb0\xd0\xbc\xd0\xb5\xd1\x80\xd0\xb8\xd0\xba\xd0\xb0\xd0\xbd\xd1\x81\xd0\xba\xd0\xb0\xd1\x8f\x20\xd1\x83\xd0\xbd\xd1\x86\xd0\xb8\xd1\x8f", MeasConv::G_VOLUME, 115.6, 0 },	// американская унция
	{ "\xd0\xb4\xd0\xb5\xd0\xba\xd0\xb0\xd0\xbb\xd0\xb8\xd1\x82\xd1\x80", MeasConv::G_VOLUME, 10., 0 },		// декалитр
	{ "\xd0\xb8\xd0\xbc\xd0\xbf\xd0\xb5\xd1\x80\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9\x20\xd0\xb3\xd0\xb0\xd0\xbb\xd0\xbb\xd0\xbe\xd0\xbd", MeasConv::G_VOLUME, 4.54609188, 0 },		// имперский галлон
	{ "\xd0\xb8\xd0\xbc\xd0\xbf\xd0\xb5\xd1\x80\xd1\x81\xd0\xba\xd0\xb0\xd1\x8f\x20\xd0\xba\xd0\xb2\xd0\xb0\xd1\x80\xd1\x82\xd0\xb0", MeasConv::G_VOLUME, 1.13652297, 0 },		// имперская кварта
	{ "\xd0\xb8\xd0\xbc\xd0\xbf\xd0\xb5\xd1\x80\xd1\x81\xd0\xba\xd0\xb0\xd1\x8f\x20\xd0\xbf\xd0\xb8\xd0\xbd\xd1\x82\xd0\xb0", MeasConv::G_VOLUME, 0.568261485, 0 },		// имперская пинта
	{ "\xd0\xb8\xd0\xbc\xd0\xbf\xd0\xb5\xd1\x80\xd1\x81\xd0\xba\xd0\xb0\xd1\x8f\x20\xd1\x83\xd0\xbd\xd1\x86\xd0\xb8\xd1\x8f", MeasConv::G_VOLUME, 0.0284130742, 0 },	// имперская унция
	{ "\xd0\xb8\xd0\xbc\xd0\xbf\xd0\xb5\xd1\x80\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9\x20\xd0\xb1\xd1\x83\xd1\x88\xd0\xb5\xd0\xbb\xd1\x8c", MeasConv::G_VOLUME, 36.368735, 0 },	// имперский бушель
	{ "\xd0\xba\xd1\x80\xd1\x83\xd0\xb6\xd0\xba\xd0\xb0", MeasConv::G_VOLUME, 0.4, 0 },		// кружка
	{ "\xd0\xba\xd1\x83\xd0\xb1\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9\x20\xd0\xb4\xd1\x8e\xd0\xb9\xd0\xbc", MeasConv::G_VOLUME, 0.016387064, 0 },		// кубический дюйм
	{ "\xd0\xba\xd1\x83\xd0\xb1\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9\x20\xd0\xbc\xd0\xb5\xd1\x82\xd1\x80", MeasConv::G_VOLUME, 1000., 0 },	// кубический метр
	{ "\xd0\xba\xd1\x83\xd0\xb1\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9\x20\xd1\x84\xd1\x83\xd1\x82", MeasConv::G_VOLUME, 28.3168466, 0 },		// кубический фут
	{ "\xd0\xbb\xd0\xb8\xd1\x82\xd1\x80", MeasConv::G_VOLUME, 1., 0 },		// литр
	{ "\xd0\xbc\xd0\xb8\xd0\xbb\xd0\xbb\xd0\xb8\xd0\xbb\xd0\xb8\xd1\x82\xd1\x80", MeasConv::G_VOLUME, 0.001, 0 },	// миллилитр
	{ "\xd0\xbd\xd0\xb5\xd1\x84\xd1\x82\xd1\x8f\xd0\xbd\xd0\xbe\xd0\xb9\x20\xd0\xb1\xd0\xb0\xd1\x80\xd1\x80\xd0\xb5\xd0\xbb\xd1\x8c", MeasConv::G_VOLUME, 158.988, 0 },		// нефтяной баррель
	{ "\xd1\x81\xd1\x82\xd0\xb0\xd0\xba\xd0\xb0\xd0\xbd", MeasConv::G_VOLUME, 0.2, 0 },		// стакан
	{ "\xd1\x81\xd1\x82\xd0\xbe\xd0\xbb\xd0\xbe\xd0\xb2\xd0\xb0\xd1\x8f\x20\xd0\xbb\xd0\xbe\xd0\xb6\xd0\xba\xd0\xb0", MeasConv::G_VOLUME, 0.0147867648, 0 },	// столовая ложка
	{ "\xd1\x87\xd0\xb0\xd0\xb9\xd0\xbd\xd0\xb0\xd1\x8f\x20\xd0\xbb\xd0\xbe\xd0\xb6\xd0\xba\xd0\xb0", MeasConv::G_VOLUME, 0.00492892159, 0 },	// чайная ложка

	// Площадь
	{ "\xd0\xb0\xd0\xba\xd1\x80", MeasConv::G_AREA, 4046.85642, 0 },	// акр
	{ "\xd0\xb0\xd1\x80", MeasConv::G_AREA, 100., 0 },		// ар
	{ "\xd0\xb1\xd0\xb0\xd1\x80\xd0\xbd", MeasConv::G_AREA, 1E-28, 0 },		// барн
	{ "\xd0\xb3\xd0\xb5\xd0\xba\xd1\x82\xd0\xb0\xd1\x80", MeasConv::G_AREA, 10000., 0 },	// гектар
	{ "\xd0\xba\xd0\xb0\xd0\xb7\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xb0\xd1\x8f\x20\xd0\xb4\xd0\xb5\xd1\x81\xd1\x8f\xd1\x82\xd0\xb8\xd0\xbd\xd0\xb0", MeasConv::G_AREA, 10925.3975, 0 },	// казенная десятина
	{ "\xd0\xba\xd0\xb2\xd0\xb0\xd0\xb4\xd1\x80\xd0\xb0\xd1\x82\xd0\xbd\xd1\x8b\xd0\xb9\x20\xd0\xb0\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd", MeasConv::G_AREA, 0.50580544, 0 },	// квадратный аршин
	{ "\xd0\xba\xd0\xb2\xd0\xb0\xd0\xb4\xd1\x80\xd0\xb0\xd1\x82\xd0\xbd\xd0\xb0\xd1\x8f\x20\xd0\xb2\xd0\xb5\xd1\x80\xd1\x81\xd1\x82\xd0\xb0", MeasConv::G_AREA, 1138062.24, 0 },	// квадратная верста
	{ "\xd0\xba\xd0\xb2\xd0\xb0\xd0\xb4\xd1\x80\xd0\xb0\xd1\x82\xd0\xbd\xd1\x8b\xd0\xb9\x20\xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xbe\xd0\xba", MeasConv::G_AREA, 0.0019758025, 0 },		// квадратный вершок
	{ "\xd0\xba\xd0\xb2\xd0\xb0\xd0\xb4\xd1\x80\xd0\xb0\xd1\x82\xd0\xbd\xd1\x8b\xd0\xb9\x20\xd0\xb4\xd1\x8e\xd0\xb9\xd0\xbc", MeasConv::G_AREA, 0.00064516, 0 },	// квадратный дюйм
	{ "\xd0\xba\xd0\xb2\xd0\xb0\xd0\xb4\xd1\x80\xd0\xb0\xd1\x82\xd0\xbd\xd1\x8b\xd0\xb9\x20\xd0\xbc\xd0\xb5\xd1\x82\xd1\x80", MeasConv::G_AREA, 1., 0 },	// квадратный метр
	{ "\xd0\xba\xd0\xb2\xd0\xb0\xd0\xb4\xd1\x80\xd0\xb0\xd1\x82\xd0\xbd\xd0\xb0\xd1\x8f\x20\xd0\xbc\xd0\xb8\xd0\xbb\xd1\x8f", MeasConv::G_AREA, 2589988.11, 0 },	// квадратная миля
	{ "\xd0\xba\xd0\xb2\xd0\xb0\xd0\xb4\xd1\x80\xd0\xb0\xd1\x82\xd0\xbd\xd1\x8b\xd0\xb9\x20\xd0\xbc\xd0\xb8\xd0\xbb\xd0\xbb\xd0\xb8\xd0\xbc\xd0\xb5\xd1\x82\xd1\x80", MeasConv::G_AREA, 1E-6, 0 },		// квадратный миллиметр
	{ "\xd0\xba\xd0\xb2\xd0\xb0\xd0\xb4\xd1\x80\xd0\xb0\xd1\x82\xd0\xbd\xd0\xb0\xd1\x8f\x20\xd1\x81\xd0\xb0\xd0\xb6\xd0\xb5\xd0\xbd\xd1\x8c", MeasConv::G_AREA, 4.55224896, 0 },	// квадратная сажень
	{ "\xd0\xba\xd0\xb2\xd0\xb0\xd0\xb4\xd1\x80\xd0\xb0\xd1\x82\xd0\xbd\xd1\x8b\xd0\xb9\x20\xd1\x81\xd0\xb0\xd0\xbd\xd1\x82\xd0\xb8\xd0\xbc\xd0\xb5\xd1\x82\xd1\x80", MeasConv::G_AREA, 1E-4 },		// квадратный сантиметр
	{ "\xd0\xba\xd0\xb2\xd0\xb0\xd0\xb4\xd1\x80\xd0\xb0\xd1\x82\xd0\xbd\xd1\x8b\xd0\xb9\x20\xd1\x84\xd1\x83\xd1\x82", MeasConv::G_AREA, 0.09290304, 0 },	// квадратный фут

	// Радиоактивность
	{ "\xd0\xb1\xd0\xb5\xd0\xba\xd0\xba\xd0\xb5\xd1\x80\xd0\xb5\xd0\xbb\xd1\x8c", MeasConv::G_RADIOACTIVITY, 1., 0 },	// беккерель
	{ "\xd0\xba\xd1\x8e\xd1\x80\xd0\xb8", MeasConv::G_RADIOACTIVITY, 37E+9, 0 },	// кюри

	// Свет
	{ "\xd0\xbb\xd1\x8e\xd0\xbc\xd0\xb5\xd0\xbd", MeasConv::G_LIGHT, 1., 0 },	// люмен
	{ "\xd1\x81\xd0\xb2\xd0\xb5\xd1\x87\xd0\xb0\x20\x28\xd0\xba\xd0\xb0\xd0\xbd\xd0\xb4\xd0\xb5\xd0\xbb\xd0\xb0\x29", MeasConv::G_LIGHT, 1., 0 },	// свеча (кандела)

	// Скорость
	{ "\xd0\xba\xd0\xb8\xd0\xbb\xd0\xbe\xd0\xbc\xd0\xb5\xd1\x82\xd1\x80\x20\xd0\xb2\x20\xd1\x87\xd0\xb0\xd1\x81", MeasConv::G_SPEED, 3.6, 0  },		// километр в час
	{ "\xd0\xbc\xd0\xb5\xd1\x82\xd1\x80\x20\xd0\xb2\x20\xd1\x81\xd0\xb5\xd0\xba\xd1\x83\xd0\xbd\xd0\xb4\xd1\x83", MeasConv::G_SPEED, 1., 0 },	// метр в секунду
	{ "\xd0\xbc\xd0\xb8\xd0\xbb\xd1\x8f\x20\xd0\xb2\x20\xd1\x87\xd0\xb0\xd1\x81", MeasConv::G_SPEED, 2.23693629205, 0 },	// миля в час
	{ "\xd0\xbc\xd0\xbe\xd1\x80\xd1\x81\xd0\xba\xd0\xb0\xd1\x8f\x20\xd0\xbc\xd0\xb8\xd0\xbb\xd1\x8f\x20\xd0\xb2\x20\xd1\x87\xd0\xb0\xd1\x81", MeasConv::G_SPEED, 1.94384449244, 0 },	// морская миля в час
	{ "\xd1\x81\xd0\xba\xd0\xbe\xd1\x80\xd0\xbe\xd1\x81\xd1\x82\xd1\x8c\x20\xd1\x81\xd0\xb2\xd0\xb5\xd1\x82\xd0\xb0", MeasConv::G_SPEED, 299792458., 0 },	// скорость света
	{ "\xd1\x83\xd0\xb7\xd0\xb5\xd0\xbb", MeasConv::G_SPEED, 0.514444444, 0 },		// узел

	// Температура
	{ "\xd0\xb3\xd1\x80\xd0\xb0\xd0\xb4\xd1\x83\xd1\x81\x20\xd1\x80\xd0\xb5\xd0\xbe\xd0\xbc\xd1\x8e\xd1\x80\xd0\xb0", MeasConv::G_TEMPERATURE, 1.25, 0 },	// градус реомюра
	{ "\xd0\xb3\xd1\x80\xd0\xb0\xd0\xb4\xd1\x83\xd1\x81\x20\xd1\x84\xd0\xb0\xd1\x80\xd0\xb5\xd0\xbd\xd0\xb3\xd0\xb5\xd0\xb9\xd1\x82\xd0\xb0", MeasConv::G_TEMPERATURE, 5. / 9., 32. },		// градус фаренгейта
	{ "\xd0\xb3\xd1\x80\xd0\xb0\xd0\xb4\xd1\x83\xd1\x81\x20\xd1\x86\xd0\xb5\xd0\xbb\xd1\x8c\xd1\x81\xd0\xb8\xd1\x8f", MeasConv::G_TEMPERATURE, 1., 0 },		// градус цельсия
	{ "\xd0\xba\xd0\xb5\xd0\xbb\xd1\x8c\xd0\xb2\xd0\xb8\xd0\xbd", MeasConv::G_TEMPERATURE, 1., 273.15 },	// кельвин

	// Угол
	{ "\xd0\xb3\xd1\x80\xd0\xb0\xd0\xb4\xd1\x83\xd1\x81", MeasConv::G_ANGLE, 1., 0 },	// градус
	{ "\xd1\x80\xd0\xb0\xd0\xb4\xd0\xb8\xd0\xb0\xd0\xbd", MeasConv::G_ANGLE, 57.295779513, 0 },		// радиан
	{ "\xd1\x83\xd0\xb3\xd0\xbb\xd0\xbe\xd0\xb2\xd0\xb0\xd1\x8f\x20\xd0\xbc\xd0\xb8\xd0\xbd\xd1\x83\xd1\x82\xd0\xb0", MeasConv::G_ANGLE, 1. / 60., 0 },		// угловая минута
	{ "\xd1\x83\xd0\xb3\xd0\xbb\xd0\xbe\xd0\xb2\xd0\xb0\xd1\x8f\x20\xd1\x81\xd0\xb5\xd0\xba\xd1\x83\xd0\xbd\xd0\xb4\xd0\xb0", MeasConv::G_ANGLE, 1. / 3600., 0  },		// угловая секунда

	// Энергия
	{ "\xd0\xb1\xd1\x80\xd0\xb8\xd1\x82\xd0\xb0\xd0\xbd\xd1\x81\xd0\xba\xd0\xb0\xd1\x8f\x20\xd1\x82\xd0\xb5\xd1\x80\xd0\xbc\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xb0\xd1\x8f\x20\xd0\xb5\xd0\xb4\xd0\xb8\xd0\xbd\xd0\xb8\xd1\x86\xd0\xb0", MeasConv::G_ENERGY, 1055.05585, 0 },		// британская термическая единица
	{ "\xd0\xb2\xd0\xb0\xd1\x82\xd1\x82\x20\xd1\x81\xd0\xb5\xd0\xba\xd1\x83\xd0\xbd\xd0\xb4\xd0\xb0", MeasConv::G_ENERGY, 1., 0 },		// ватт секунда
	{ "\xd0\xb2\xd0\xb0\xd1\x82\xd1\x82\x20\xd1\x87\xd0\xb0\xd1\x81", MeasConv::G_ENERGY, 36E10 + 2, 0 },	// ватт час
	{ "\xd0\xb4\xd0\xb6\xd0\xbe\xd1\x83\xd0\xbb\xd1\x8c", MeasConv::G_ENERGY, 1., 0 },		// джоуль
	{ "\xd0\xba\xd0\xb0\xd0\xbb\xd0\xbe\xd1\x80\xd0\xb8\xd1\x8f", MeasConv::G_ENERGY, 4.184, 0 },	// калория
	{ "\xd0\xba\xd0\xb8\xd0\xbb\xd0\xbe\xd0\xb2\xd0\xb0\xd1\x82\xd1\x82\x20\xd1\x87\xd0\xb0\xd1\x81", MeasConv::G_ENERGY, 36E10 + 5, 0 },	// киловатт час
	{ "\xd0\xba\xd0\xb8\xd0\xbb\xd0\xbe\xd0\xba\xd0\xb0\xd0\xbb\xd0\xbe\xd1\x80\xd0\xb8\xd1\x8f", MeasConv::G_ENERGY, 4184, 0 },	// килокалория
	{ "\xd0\xbc\xd0\xb8\xd0\xbb\xd0\xbb\xd0\xb8\xd0\xbe\xd0\xbd\x20\xd0\xb1\xd1\x80\xd0\xb8\xd1\x82\xd0\xb0\xd0\xbd\xd1\x81\xd0\xba\xd0\xb8\xd1\x85\x20\xd1\x82\xd0\xb5\xd1\x80\xd0\xbc\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xb8\xd1\x85\x20\xd0\xb5\xd0\xb4\xd0\xb8\xd0\xbd\xd0\xb8\xd1\x86", MeasConv::G_ENERGY, 1055055850.,0 },		// миллион британских термических единиц
	{ "\xd1\x8d\xd0\xbb\xd0\xb5\xd0\xba\xd1\x82\xd1\x80\xd0\xbe\xd0\xbd\xd0\xb2\xd0\xbe\xd0\xbb\xd1\x8c\xd1\x82", MeasConv::G_ENERGY, 62415E+14, 0 },	// электронвольт
	{ "\xd1\x8d\xd1\x80\xd0\xb3", MeasConv::G_ENERGY, 1E+7, 0 },	// эрг

};

static unsigned int RAW_DATA_SIZE = sizeof( RAW_DATA ) / sizeof( TRAW_DATA );

ExtICoreRO * MeasConv::vBase = nullptr;
NanoLib::NameIndex MeasConv::vUnitsNames;
avector<MeasConv::Unit> MeasConv::vUnitsValues;


void MeasConv::Init( ExtICoreRO & aBase )
{
	vBase = &aBase;

	// Инициализация таблицы коэффициентов.
	InitTable();
}

void MeasConv::InitTable()
{
	vUnitsNames.Create();

	for( unsigned int unit_n = 0; unit_n < RAW_DATA_SIZE; ++unit_n )
	{
		unsigned int unit_id;
		NanoLib::NameIndex::ReturnCode rc = vUnitsNames.AddName( RAW_DATA[unit_n].vName, unit_id );
		if( rc != NanoLib::NameIndex::rcSuccess )
		{
			vUnitsNames.Reset();
			LogError( "Failed to initialize Units Table" );
			return;
		}

		if( unit_id != vUnitsValues.size())
		{
			vUnitsNames.Reset();
			LogError( "Failed to initialize Units Table" );
			return;
		}

		vUnitsValues.push_back( (Unit){ RAW_DATA[unit_n].vGroup, RAW_DATA[unit_n].vMValue, RAW_DATA[unit_n].vSValue } );
		if( vUnitsValues.no_memory() )
		{
			vUnitsNames.Reset();
			LogError( "Failed to initialize Units Table" );
			return;
		}
	}
}

InfEngineErrors MeasConv::Apply( const char ** aArgs,
		const char *& aResult,
		unsigned int & aLength,
		nMemoryAllocator * aMemoryAllocator,
		FunctionContext * aFunctionContext )
{
	// Проверяем, была ли инициализирована таблица уоэффициентов.
	if( !vUnitsNames.GetNamesNumber() )
		return INF_ENGINE_ERROR_DLF_SKIP_ANSWER;

	// Проверка аргументов.
	if( !aArgs[0] || !aArgs[1] || !aArgs[2] || aArgs[3] )
		return INF_ENGINE_ERROR_ARGC;

	// Преобразование названий единиц к нижнему регистру.
	aTextString from;
	aTextString to;
	if( nlrcSuccess != from.assign( aArgs[0] ) )
		return INF_ENGINE_ERROR_NOFREE_MEMORY;
	if( nlrcSuccess != to.assign( aArgs[1] ) )
		return INF_ENGINE_ERROR_NOFREE_MEMORY;
	if( nlrcSuccess != SetLower( from ) )
		return INF_ENGINE_ERROR_NANOLIB;
	if( nlrcSuccess != SetLower( to ) )
		return INF_ENGINE_ERROR_NANOLIB;

	// Поиск коэффициентов.
	const unsigned int * from_id = vUnitsNames.Search( from.ToConstChar(), from.size() );
	const unsigned int * to_id = vUnitsNames.Search( to.ToConstChar(), to.size() );

	if( !from_id || !to_id || vUnitsValues[*from_id].vGroup != vUnitsValues[*to_id].vGroup )
		return INF_ENGINE_ERROR_DLF_SKIP_ANSWER;

	LongFloat from_mval( vUnitsValues[*from_id].vMValue );
	LongFloat from_sval( vUnitsValues[*from_id].vSValue );
	LongFloat to_mval( vUnitsValues[*to_id].vMValue );
	LongFloat to_sval( vUnitsValues[*to_id].vSValue );

	// Конвертор чисел.
	static NumberConvertor Convertor;

	// Разбор тертьего аргумента.
	LongFloat value = 0;
	nlReturnCode nlrc = Convertor.s2lf( aArgs[2], value );
	if( nlrc )
		return INF_ENGINE_ERROR_DLF_SKIP_ANSWER;

	// Вычисление результата.
	LongFloat result = ( value - from_sval ) * from_mval / to_mval + to_sval;
	LongFloat abs_result = result < LongFloat( 0 ) ? result * LongFloat( -1 ) : result;

	// Подготовка результата.
	char * buffer = static_cast<char *>( aMemoryAllocator->Allocate( RESULT_BUFFER_LEN ) );
	if( !buffer )
		return INF_ENGINE_ERROR_NOFREE_MEMORY;
	if( abs_result < LongFloat( 0.00000001 ) )
		aLength = result.snprintf( buffer, RESULT_BUFFER_LEN, 50 );
	else if( abs_result < LongFloat( 0.000001 ) )
		aLength = result.snprintf( buffer, RESULT_BUFFER_LEN, 9  );
	else if( abs_result < LongFloat( 0.0001 ) )
		aLength = result.snprintf( buffer, RESULT_BUFFER_LEN, 7 );
	else if( abs_result < LongFloat( 0.01 ) )
		aLength = result.snprintf( buffer, RESULT_BUFFER_LEN, 5 );
	else if( abs_result < LongFloat( 1 ) )
		aLength = result.snprintf( buffer, RESULT_BUFFER_LEN, 3 );
	else
		aLength = result.snprintf( buffer, RESULT_BUFFER_LEN, 2 );

	aResult = buffer;

	return INF_ENGINE_SUCCESS;
}
